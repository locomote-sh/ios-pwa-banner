/*
   Copyright 2018 Locomote Limited
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// Show a PWA banner in iOS
console.log('loaded ios-pwa-banner.js 0');

let disableBannerCheck = true;

// Detects if device is on iOS
const isIos = () => {
    const userAgent = window.navigator.userAgent.toLowerCase();
    console.log('UA')
    console.log(userAgent);
    return /iphone|ipad|ipod/.test( userAgent );
}

const iOSversion = () => {
  if (/iP(hone|od|ad)/.test(navigator.platform)) {
    // supports iOS 2.0 and later: <http://bit.ly/TJjs1V>
    var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
    return [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)];
  }
}

//let ver = iOSversion();
//if (ver[0] >= 11) {
//  alert('This is running iOS 11 or later.');
//}

// Detects if device is in standalone mode
const isInStandaloneMode = () => ('standalone' in window.navigator) && (window.navigator.standalone);

let addClickListener = ( element, fn) => {
    return addEventListener( 'touchstart', element, fn );
}

// TODO: click won't work on safary mobile
let addEventListener = ( type, element, fn ) => {
    document.addEventListener( type, event => {
        if (!event.target.closest( element )) return;
        fn( event );
    }, false );
}

// TODO: Use function for name, prototyped or exported functions
// use arrow for callbacks 
let showBanner = () => {
    removeElementClass('ios-pwa-banner', 'hide-element');
}

let hideBanner = () => {
    addElementClass('ios-pwa-banner', 'hide-element');
}

let showTextOne = () => {
    showElementClass('banner-text-one');
    hideElementClass('banner-text-two');
}

let showTextTwo = () => {
    hideElementClass('banner-text-one');
    showElementClass('banner-text-two');
}

let showElementClass = ( elementClass ) => {
    removeElementClass( elementClass, 'hide-element');
    addElementClass( elementClass, 'show-element');
}

let hideElementClass = ( elementClass ) => {
    removeElementClass( elementClass, 'show-element');
    addElementClass( elementClass, 'hide-element');
}

// TODO: Use querySelector instead of getElementByClassName document.querySelector([element]
let addElementClass = ( elementClass, className ) => {
    document.getElementsByClassName( elementClass )[0].classList.add( className );
}

let removeElementClass = ( elementClass, className ) => {
    document.getElementsByClassName( elementClass )[0].classList.remove( className );
}

let getBannerHtml = function( appName ){
    return `
    <div class="ios-pwa-banner hide-element">
        <div class="app-icon"><img class="vertical-align" src="img/locomote-logo.png" /></div>
        <div class="banner-text">
            <span class="banner-text-one">Install ${appName} to your home screen</span>
            <span class="banner-text-two hide-element">Tap <img src="img/share-action-icon.png" /> and "Add to homescreen"</span>
        </div>
        <div class="closing-button">
            <img class="vertical-align" src="img/cancel.png" />
        </div>
    </div>`;
}

document.addEventListener("DOMContentLoaded", function() {
    // Get the app title from the headee which is uto-generated by the locomote build-web-manifest
    // More info: https://github.com/locomote-sh/build-web-manifest
    let appTitle = document.head.querySelector('[name=apple-mobile-web-app-title][content]').content || 'APP';

    let bannerElement = document.createElement('div');
    bannerElement.innerHTML = getBannerHtml(appTitle);
    document.body.appendChild(bannerElement);

    // show the banner on iOS
    if ( disableBannerCheck || (isIos() && !isInStandaloneMode()) ) {
        console.log('Show banner');
        showBanner();
    }

    // register close button event
    addClickListener( '.closing-button', ( event ) => {
        hideBanner();
    });

    // register tap in banner event, this will show message with indications to
    // how to install the app
    let installTextVisible = true;
    addClickListener( '.ios-pwa-banner', ( event ) => {
        console.log('.ios-pwa-banner click' + event);
        if ( installTextVisible ){
            showTextTwo();
            installTextVisible = false;
        }else{
            showTextOne();
            installTextVisible = true;
        }
    });
});
